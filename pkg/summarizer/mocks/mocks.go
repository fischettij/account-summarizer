// Code generated by MockGen. DO NOT EDIT.
// Source: manager.go

// Package mocks is a generated GoMock package.
package mocks

import (
	reflect "reflect"
	time "time"

	summarizer "github.com/fischettij/account-summarizer/pkg/summarizer"
	gomock "github.com/golang/mock/gomock"
)

// MockSummarizer is a mock of Summarizer interface.
type MockSummarizer struct {
	ctrl     *gomock.Controller
	recorder *MockSummarizerMockRecorder
}

// MockSummarizerMockRecorder is the mock recorder for MockSummarizer.
type MockSummarizerMockRecorder struct {
	mock *MockSummarizer
}

// NewMockSummarizer creates a new mock instance.
func NewMockSummarizer(ctrl *gomock.Controller) *MockSummarizer {
	mock := &MockSummarizer{ctrl: ctrl}
	mock.recorder = &MockSummarizerMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockSummarizer) EXPECT() *MockSummarizerMockRecorder {
	return m.recorder
}

// GenerateReport mocks base method.
func (m *MockSummarizer) GenerateReport(fileName string) (summarizer.Summary, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GenerateReport", fileName)
	ret0, _ := ret[0].(summarizer.Summary)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GenerateReport indicates an expected call of GenerateReport.
func (mr *MockSummarizerMockRecorder) GenerateReport(fileName interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GenerateReport", reflect.TypeOf((*MockSummarizer)(nil).GenerateReport), fileName)
}

// MockEmailSender is a mock of EmailSender interface.
type MockEmailSender struct {
	ctrl     *gomock.Controller
	recorder *MockEmailSenderMockRecorder
}

// MockEmailSenderMockRecorder is the mock recorder for MockEmailSender.
type MockEmailSenderMockRecorder struct {
	mock *MockEmailSender
}

// NewMockEmailSender creates a new mock instance.
func NewMockEmailSender(ctrl *gomock.Controller) *MockEmailSender {
	mock := &MockEmailSender{ctrl: ctrl}
	mock.recorder = &MockEmailSenderMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockEmailSender) EXPECT() *MockEmailSenderMockRecorder {
	return m.recorder
}

// SendEmail mocks base method.
func (m *MockEmailSender) SendEmail(to string, message []byte) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "SendEmail", to, message)
	ret0, _ := ret[0].(error)
	return ret0
}

// SendEmail indicates an expected call of SendEmail.
func (mr *MockEmailSenderMockRecorder) SendEmail(to, message interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SendEmail", reflect.TypeOf((*MockEmailSender)(nil).SendEmail), to, message)
}

// MockSummary is a mock of Summary interface.
type MockSummary struct {
	ctrl     *gomock.Controller
	recorder *MockSummaryMockRecorder
}

// MockSummaryMockRecorder is the mock recorder for MockSummary.
type MockSummaryMockRecorder struct {
	mock *MockSummary
}

// NewMockSummary creates a new mock instance.
func NewMockSummary(ctrl *gomock.Controller) *MockSummary {
	mock := &MockSummary{ctrl: ctrl}
	mock.recorder = &MockSummaryMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockSummary) EXPECT() *MockSummaryMockRecorder {
	return m.recorder
}

// AverageCreditAmount mocks base method.
func (m *MockSummary) AverageCreditAmount() float64 {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "AverageCreditAmount")
	ret0, _ := ret[0].(float64)
	return ret0
}

// AverageCreditAmount indicates an expected call of AverageCreditAmount.
func (mr *MockSummaryMockRecorder) AverageCreditAmount() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "AverageCreditAmount", reflect.TypeOf((*MockSummary)(nil).AverageCreditAmount))
}

// AverageDebitAmount mocks base method.
func (m *MockSummary) AverageDebitAmount() float64 {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "AverageDebitAmount")
	ret0, _ := ret[0].(float64)
	return ret0
}

// AverageDebitAmount indicates an expected call of AverageDebitAmount.
func (mr *MockSummaryMockRecorder) AverageDebitAmount() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "AverageDebitAmount", reflect.TypeOf((*MockSummary)(nil).AverageDebitAmount))
}

// Balance mocks base method.
func (m *MockSummary) Balance() float64 {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Balance")
	ret0, _ := ret[0].(float64)
	return ret0
}

// Balance indicates an expected call of Balance.
func (mr *MockSummaryMockRecorder) Balance() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Balance", reflect.TypeOf((*MockSummary)(nil).Balance))
}

// TransactionsByMonth mocks base method.
func (m *MockSummary) TransactionsByMonth() map[time.Month]int {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "TransactionsByMonth")
	ret0, _ := ret[0].(map[time.Month]int)
	return ret0
}

// TransactionsByMonth indicates an expected call of TransactionsByMonth.
func (mr *MockSummaryMockRecorder) TransactionsByMonth() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "TransactionsByMonth", reflect.TypeOf((*MockSummary)(nil).TransactionsByMonth))
}
